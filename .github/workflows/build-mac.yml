name: Build & Release Electron App

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]  # ‚úÖ Build for both macOS & Windows

    runs-on: ${{ matrix.os }}

    steps:
      - name: üõ† Checkout Code
        uses: actions/checkout@v3

      - name: üèó Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: üì• Install Python in `backend/python/` (Windows Only)
        if: runner.os == 'Windows'
        run: |
          curl -LO https://www.python.org/ftp/python/3.12.0/python-3.12.0-embed-amd64.zip
          unzip python-3.12.0-embed-amd64.zip -d backend/python
          echo "Python installed successfully!"

      - name: üêç Install Python (macOS)
        if: runner.os == 'macOS'
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: üì¶ Install Python Dependencies (`PyPDF2`)
        run: |
          python -m pip install --upgrade pip
          python -m pip install PyPDF2 --target=backend/python/Lib/site-packages

      - name: üì¶ Install Node.js Dependencies
        run: npm install

      - name: üîÑ Get Latest Release Version & Increment It
        id: version
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: token $GH_PAT" \
          "https://api.github.com/repos/${{ github.repository }}/releases/latest" | jq -r .tag_name)

          if [[ "$LATEST_TAG" == "null" || -z "$LATEST_TAG" ]]; then
            NEW_VERSION="v1.0.0"
          else
            MAJOR=$(echo $LATEST_TAG | cut -d'.' -f1 | sed 's/v//')
            MINOR=$(echo $LATEST_TAG | cut -d'.' -f2)
            PATCH=$(echo $LATEST_TAG | cut -d'.' -f3)

            PATCH=$((PATCH + 1))
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "New version: $NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: üè∑Ô∏è Create or Update GitHub Tag & Release
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git config --global user.name "GitHub Actions Bot"

          git tag -a $NEW_VERSION -m "Release $NEW_VERSION"
          git push --tags https://x-access-token:${GH_PAT}@github.com/${{ github.repository }}

          curl -X POST -H "Authorization: token $GH_PAT" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${{ github.repository }}/releases" \
          -d '{"tag_name": "'"$NEW_VERSION"'", "name": "'"$NEW_VERSION"'", "draft": false, "prerelease": false}'

      - name: üöÄ Build Electron App (macOS)
        if: runner.os == 'macOS'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          npx electron-builder --mac

      - name: üöÄ Build Electron App (Windows)
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          npx electron-builder --win

      - name: üì§ Upload macOS Build to GitHub Releases
        if: runner.os == 'macOS'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh release upload $NEW_VERSION dist/*.dmg --clobber

      - name: üì§ Upload Windows Build to GitHub Releases
        if: runner.os == 'Windows'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          gh release upload $NEW_VERSION dist/*.exe --clobber
