name: Build Electron App

on:
  push:
    branches:
      - main
  workflow_dispatch:  # Allows manual trigger

jobs:
  build:
    strategy:
      matrix:
        os: [macos-latest, windows-latest]

    runs-on: ${{ matrix.os }}

    steps:
      - name: 🛠 Checkout Code
        uses: actions/checkout@v3

      - name: 🏗 Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: 🔄 Get Latest Release Version & Increment It
        id: version
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          LATEST_TAG=$(curl -s -H "Authorization: token $GH_PAT" \
          "https://api.github.com/repos/${{ github.repository }}/tags" | jq -r '.[0].name')

          if [[ "$LATEST_TAG" == "null" || -z "$LATEST_TAG" ]]; then
            NEW_VERSION="v1.0.0"
          else
            MAJOR=$(echo $LATEST_TAG | cut -d'.' -f1 | sed 's/v//')
            MINOR=$(echo $LATEST_TAG | cut -d'.' -f2)
            PATCH=$(echo $LATEST_TAG | cut -d'.' -f3)

            PATCH=$((PATCH + 1))
            NEW_VERSION="v$MAJOR.$MINOR.$PATCH"
          fi

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "New version: $NEW_VERSION"

      - name: 🚀 Build Electron App (macOS)
        if: runner.os == 'macOS'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          npx electron-builder --mac

      - name: 🚀 Build Electron App (Windows)
        if: runner.os == 'Windows'
        env:
          GH_PAT: ${{ secrets.GH_PAT }}
        run: |
          npx electron-builder --win

      - name: 📦 Store Build Artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v3
        with:
          name: macOS-Build
          path: dist/*.dmg

      - name: 📦 Store Build Artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v3
        with:
          name: Windows-Build
          path: dist/*.exe
